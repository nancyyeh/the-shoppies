{"version":3,"sources":["components/SearchBar.jsx","components/ApiSettingsModal.jsx","components/ApiSettingsButton.jsx","components/NominationList.jsx","components/SearchResults.jsx","components/Snackbar.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","padding","display","alignItems","input","marginLeft","spacing","flex","iconButton","SearchBar","value","onChange","classes","Paper","component","className","IconButton","type","aria-label","InputBase","placeholder","ApiSettingsModal","isOpen","onClose","onApiChange","useState","setInput","handleClose","Dialog","open","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","margin","label","e","target","fullWidth","DialogActions","Button","onClick","color","ApiSettingsButton","apikey","showApiSetting","setShowApiSetting","handleClickOpen","useEffect","sectionDesktop","breakpoints","up","sectionMobile","variant","NominationsList","nominations","removeNomination","Object","keys","length","List","dense","values","map","movie","ListItem","key","imdbID","ListItemAvatar","Avatar","Poster","src","alt","width","ListItemText","primary","Title","secondary","Year","ListItemSecondaryAction","edge","pagination","justifyContent","SearchResults","searchKey","isError","error","numResult","addNomination","movieData","page","handlePageChange","isFiveNominations","role","Box","isNominated","undefined","disabled","Pagination","count","Math","ceil","PositionedSnackbar","React","setOpen","event","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","TransitionComponent","props","Slide","direction","Alert","severity","App","setSearchKey","setMovieData","setNumResults","setPage","setIsError","setError","JSON","parse","localStorage","getItem","setNominations","setIsFiveNominations","setApiKey","onSetNomination","setItem","stringify","delayedQuery","useCallback","_","debounce","sendQuery","url","fetch","method","then","response","json","result","Response","totalResults","data","Search","forEach","item","Error","flexDirection","p","m","position","top","right","Grid","container","xs","sm","newNomination","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"2TAOMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,UACTC,QAAS,OACTC,WAAY,UAEdC,MAAO,CACLC,WAAYN,EAAMO,QAAQ,GAC1BC,KAAM,GAERC,WAAY,CACVP,QAAS,QAIN,SAASQ,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC3BC,EAAUf,IAEhB,OACE,kBAACgB,EAAA,EAAD,CAAOC,UAAU,OAAOC,UAAWH,EAAQZ,MACzC,kBAACgB,EAAA,EAAD,CACEC,KAAK,SACLF,UAAWH,EAAQJ,WACnBU,aAAW,UAEX,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CACEJ,UAAWH,EAAQR,MACnBgB,YAAY,gBACZH,KAAK,OACLP,MAAOA,EACPC,SAAUA,K,oFC9BX,SAASU,EAAT,GAAoE,IAAxCC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,YAAad,EAAS,EAATA,MAAS,EAC9Ce,mBAASf,GADqC,mBACjEN,EADiE,KAC1DsB,EAD0D,KAGlEC,EAAc,WAClBJ,KAQF,OACE,6BACE,kBAACK,EAAA,EAAD,CACEC,KAAMP,EACNC,QAASI,EACTG,kBAAgB,qBAEhB,kBAACC,EAAA,EAAD,CAAaC,GAAG,qBAAhB,eACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,0EAGA,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,OAAO,QACPL,GAAG,OACHM,MAAM,UACNrB,KAAK,OACLP,MAAON,EACPO,SAAU,SAAC4B,GAAD,OAAOb,EAASa,EAAEC,OAAO9B,QACnC+B,WAAS,KAGb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAASjB,EAAakB,MAAM,WAApC,UAGA,kBAACF,EAAA,EAAD,CAAQC,QAhCK,WACnBrB,IACAC,EAAYpB,IA8ByByC,MAAM,WAArC,aC1CH,SAASC,EAAT,GAAqD,IAAxBC,EAAuB,EAAvBA,OAAQvB,EAAe,EAAfA,YAAe,EACbC,oBAAS,GADI,mBAClDuB,EADkD,KAClCC,EADkC,KAInDC,EAAkB,WACtBD,GAAkB,IAEpBE,qBAAU,WACO,KAAXJ,GACFE,GAAkB,KAEnB,CAACF,IAGJ,IAcMnC,EAdYd,aAAW,SAACC,GAAD,MAAY,CACvCqD,eAAe,aACblD,QAAS,QACRH,EAAMsD,YAAYC,GAAG,MAAQ,CAC5BpD,QAAS,SAGbqD,cAAc,aACZrD,QAAS,QACRH,EAAMsD,YAAYC,GAAG,MAAQ,CAC5BpD,QAAS,YAICL,GAEhB,OACE,oCACE,kBAAC8C,EAAA,EAAD,CACE5B,UAAWH,EAAQwC,eACnBI,QAAQ,YACRX,MAAM,UACND,QAASM,EACThC,aAAW,wBALb,eAUA,kBAACF,EAAA,EAAD,CACED,UAAWH,EAAQ2C,cACnBX,QAASM,EACTL,MAAM,UACN3B,aAAW,uBAEX,kBAAC,IAAD,OAEF,kBAACG,EAAD,CACEC,OAAQ0B,EACRzB,QAAS,WACP0B,GAAkB,IAEpBvC,MAAOqC,EACPvB,YAAaA,K,4FClDd,SAASiC,EAAT,GAA6D,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,iBAC7C,OAAwC,IAApCC,OAAOC,KAAKH,GAAaI,OAEzB,6BACE,sEAC0C,+BAM5C,6BACE,kBAACC,EAAA,EAAD,CAAMC,OAAO,GACVJ,OAAOK,OAAOP,GAAaQ,KAAI,SAACC,GAAD,OAC9B,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAMG,QACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACoB,QAAjBL,EAAMM,OACL,kBAAC,IAAD,MAEA,yBAAKC,IAAKP,EAAMM,OAAQE,IAAI,eAAeC,MAAM,WAIvD,kBAACC,EAAA,EAAD,CAAcC,QAASX,EAAMY,MAAOC,UAAWb,EAAMc,OACrD,kBAACC,EAAA,EAAD,KACE,kBAAClE,EAAA,EAAD,CACEmE,KAAK,MACLjE,aAAW,SACX0B,QAAS,kBAAMe,EAAiBQ,EAAMG,UAEtC,kBAAC,IAAD,c,uCC7BZzE,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCqF,WAAY,CACVlF,QAAS,OACTmF,eAAgB,cAIb,SAASC,EAAT,GAWH,IAVFC,EAUC,EAVDA,UACAC,EASC,EATDA,QACAC,EAQC,EARDA,MACAC,EAOC,EAPDA,UACAC,EAMC,EANDA,cACAC,EAKC,EALDA,UACAlC,EAIC,EAJDA,YACAmC,EAGC,EAHDA,KACAC,EAEC,EAFDA,iBACAC,EACC,EADDA,kBAEMnF,EAAUf,IAEhB,OAAI0F,EAAUzB,OAAS,EAEnB,6BACE,4BACE,0BAAMkC,KAAK,MAAM9E,aAAW,QAA5B,gBAEQ,IAHV,mCAMA,iFAIiB,IAAZsE,EAEP,kBAACS,EAAA,EAAD,KACE,4BACE,0BAAMD,KAAK,MAAM9E,aAAW,QAA5B,sBAEQ,IAHV,gBAIgBqE,EAJhB,MAI8B,EAJ9B,KAMA,2BACE,0BAAMS,KAAK,MAAM9E,aAAW,YAA5B,gBAEQ,IAHV,YAIYuE,IAOd,6BACE,4BACE,0BAAMO,KAAK,MAAM9E,aAAW,QAA5B,sBAEQ,IAHV,gBAIgBqE,EAJhB,MAI8BG,EAJ9B,KAMA,6BACE,kBAAC3B,EAAA,EAAD,CAAMC,OAAO,GACVJ,OAAOK,OAAO2B,GAAW1B,KAAI,SAACC,GAC7B,IAAM+B,OAA4CC,IAA9BzC,EAAYS,EAAMG,QACtC,OACE,kBAACF,EAAA,EAAD,CAAUC,IAAKF,EAAMG,QACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACoB,QAAjBL,EAAMM,OACL,kBAAC,IAAD,MAEA,yBACEC,IAAKP,EAAMM,OACXE,IAAI,eACJC,MAAM,WAKd,kBAACC,EAAA,EAAD,CAAcC,QAASX,EAAMY,MAAOC,UAAWb,EAAMc,OACrD,kBAACC,EAAA,EAAD,KACE,kBAAClE,EAAA,EAAD,CACEmE,KAAK,MACLjE,aAAW,MACX0B,QAAS,kBAAM+C,EAAcxB,EAAMG,SACnC8B,SAAUF,GAAeH,EACzBlD,MAAM,WAEN,kBAAC,IAAD,cAQd,kBAACwD,EAAA,EAAD,CACER,KAAMA,EACNlF,SAAUmF,EACVQ,MAAOC,KAAKC,KAAKd,EAAY,IAC7B3E,UAAWH,EAAQwE,c,+BC7GtB,SAASqB,EAAT,GAAoD,IAAtBV,EAAqB,EAArBA,kBAAqB,EAChCW,IAAMjF,UAAS,GADiB,mBACjDI,EADiD,KAC3C8E,EAD2C,KAOxDxD,qBAAU,WAENwD,IADEZ,KAKH,CAACA,IAEJ,IAAMpE,EAAc,SAACiF,EAAOC,GACX,cAAXA,GAGJF,GAAQ,IAGV,OACE,6BACE,kBAACG,EAAA,EAAD,CACEC,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAC7CpF,KAAMA,EACNqF,iBAAkB,IAClB3F,QAASI,EACTwF,oBA1BN,SAAyBC,GACvB,OAAO,kBAACC,EAAA,EAAD,iBAAWD,EAAX,CAAkBE,UAAU,YA2B/B,kBAACC,EAAA,EAAD,CAAOhG,QAASI,EAAa6F,SAAS,UAAUhE,QAAQ,UAAxD,kC,8BC0KOiE,MAnMf,WAAgB,IAAD,EACqBhG,mBAAS,IAD9B,mBACN8D,EADM,KACKmC,EADL,OAEqBjG,mBAAS,IAF9B,mBAENmE,EAFM,KAEK+B,EAFL,OAGsBlG,mBAAS,GAH/B,mBAGNiE,EAHM,KAGKkC,EAHL,OAIWnG,mBAAS,GAJpB,mBAINoE,EAJM,KAIAgC,EAJA,OAKiBpG,oBAAS,GAL1B,mBAKN+D,EALM,KAKGsC,EALH,OAMarG,mBAAS,MANtB,mBAMNgE,EANM,KAMCsC,EAND,OAOyBtG,mBACpCuG,KAAKC,MAAMC,aAAaC,QAAQ,gBAAkB,OARvC,mBAONzE,EAPM,KAOO0E,EAPP,OAUqC3G,oBAAS,GAV9C,mBAUNsE,EAVM,KAUasC,EAVb,OAYe5G,mBAC1ByG,aAAaC,QAAQ,WAAa,YAbvB,mBAYNpF,EAZM,KAYEuF,EAZF,KAuBPC,EAAkB,SAAC7E,GACvB0E,EAAe1E,GACfwE,aAAaM,QAAQ,cAAeR,KAAKS,UAAU/E,KA8B/CgF,EAAeC,sBACnBC,IAAEC,UAAS,SAACtD,GAAD,OAAeuD,EAAUvD,KAAY,KAChD,IAQIuD,EAAY,SAACvD,EAAWM,GAC5B,IAAMkD,EACJ,mCACAhG,EACA,MACAwC,EACA,SACAM,EACA,cACEN,EAAUzB,OAAS,GACrBkF,MAAMD,EAAK,CACTE,OAAQ,QAEPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MACC,SAACG,GACC,GAAwB,SAApBA,EAAOC,SAAqB,CAC9B1B,EAAcyB,EAAOE,cACrB,IAAMC,EAAO,GACbH,EAAOI,OAAOC,SAAQ,SAACC,GACrBH,EAAKG,EAAKrF,QAAUqF,KAEtBhC,EAAa6B,GACb1B,GAAW,QAEXC,EAASsB,EAAOO,OAChB9B,GAAW,MAGf,SAACrC,GACCqC,GAAW,GACXC,EAAStC,OAoBnB,OAbAtC,qBAAU,WACR2F,EAAUvD,EAAWM,KACpB,CAAC9C,IAGJI,qBAAU,WACgC,IAApCS,OAAOC,KAAKH,GAAaI,OAC3BuE,GAAqB,GAErBA,GAAqB,KAEtB,CAAC3E,IAGF,kBAACuC,EAAA,EAAD,CACElF,UAAU,MACVb,QAAQ,OACR2J,cAAc,SACdxE,eAAe,aACfyE,EAAG,GAEH,kBAAC7D,EAAA,EAAD,CAAK6D,EAAG,EAAG/I,UAAU,UACnB,yBAAK2D,IAAI,oBAAoBC,IAAI,gBAAgBC,MAAM,SAEzD,kBAACqB,EAAA,EAAD,CACE8D,EAAG,EACHhJ,UAAU,eACViJ,SAAS,WACTC,IAAK,GACLC,MAAO,IAEP,kBAACpH,EAAD,CAAmBC,OAAQA,EAAQvB,YArHrB,SAACuB,GACnBuF,EAAUvF,GACVmF,aAAaM,QAAQ,SAAUzF,OAqH7B,kBAACkD,EAAA,EAAD,CAAK6D,EAAG,GACN,kBAACK,EAAA,EAAD,CAAMC,WAAS,EAAC9J,QAAS,GACvB,kBAAC6J,EAAA,EAAD,CAAMR,MAAI,EAACU,GAAI,IACb,kBAACxJ,EAAA,EAAD,KACE,kBAACJ,EAAD,CAAWE,SAjFA,SAAC4B,GACtBmF,EAAanF,EAAEC,OAAO9B,OACtBgI,EAAanG,EAAEC,OAAO9B,QA+EyBA,MAAO6E,MAGhD,kBAAC4E,EAAA,EAAD,CAAMR,MAAI,EAACU,GAAI,GAAIC,GAAI,GACrB,kBAACzJ,EAAA,EAAD,KACE,kBAACoF,EAAA,EAAD,CAAK6D,EAAG,GACN,kBAACxE,EAAD,CACEC,UAAWA,EACXC,QAASA,EACTC,MAAOA,EACPC,UAAWA,EACXC,cA1HM,SAACrB,GACrB,GAAIV,OAAOC,KAAKH,GAAaI,OAAS,EAAG,CACvC,IAAMyG,EAAgB3E,EAAUtB,GAChCiE,EAAgB,2BAAK7E,GAAN,kBAAoBY,EAASiG,OAwHhC3E,UAAWA,EACXlC,YAAaA,EACbmC,KAAMA,EACNC,iBA/GS,SAACc,EAAOlG,GAC/BmH,EAAQnH,GACRoI,EAAUvD,EAAW7E,IA8GPqF,kBAAmBA,OAK3B,kBAACoE,EAAA,EAAD,CAAMR,MAAI,EAACU,GAAI,GAAIC,GAAI,GACrB,kBAACzJ,EAAA,EAAD,KACE,kBAACoF,EAAA,EAAD,CAAK6D,EAAG,GACN,4BACE,0BAAM9D,KAAK,MAAM9E,aAAW,WAA5B,gBAEQ,IAHV,qBAIqB,EAAI0C,OAAOC,KAAKH,GAAaI,OAAQ,IAJ1D,cAOA,kBAACL,EAAD,CACEC,YAAaA,EACbC,iBAxIS,SAACW,GACxB,IAAMiG,EAAa,eAAQ7G,UACpB6G,EAAcjG,GACrBiE,EAAgBgC,MAuIHxE,GACC,kBAACpD,EAAA,EAAD,CACEa,QAAQ,YACRX,MAAM,UACND,QAjIa,WAC7B2F,EAAgB,KAiIArH,aAAW,qBAJb,cAcZ,kBAACuF,EAAD,CAAoBV,kBAAmBA,MC9LzByE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9F,GACL+F,QAAQ/F,MAAMA,EAAMgG,c","file":"static/js/main.c24a9e64.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n}));\n\nexport function SearchBar({ value, onChange }) {\n  const classes = useStyles();\n\n  return (\n    <Paper component=\"form\" className={classes.root}>\n      <IconButton\n        type=\"submit\"\n        className={classes.iconButton}\n        aria-label=\"search\"\n      >\n        <SearchIcon />\n      </IconButton>\n      <InputBase\n        className={classes.input}\n        placeholder=\"Search Movies\"\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </Paper>\n  );\n}\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nexport function ApiSettingsModal({ isOpen, onClose, onApiChange, value }) {\n  const [input, setInput] = useState(value);\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  const updatedValue = () => {\n    onClose();\n    onApiChange(input);\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Set API Key</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            To use this Shoppies application, please insert the OMDB api key.\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"API Key\"\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={updatedValue} color=\"primary\">\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport { IconButton, Button } from \"@material-ui/core\";\nimport { ApiSettingsModal } from \"./ApiSettingsModal\";\n\nexport function ApiSettingsButton({ apikey, onApiChange }) {\n  const [showApiSetting, setShowApiSetting] = useState(false);\n\n  // open API key settings\n  const handleClickOpen = () => {\n    setShowApiSetting(true);\n  };\n  useEffect(() => {\n    if (apikey === \"\") {\n      setShowApiSetting(true);\n    }\n  }, [apikey]);\n\n  //CSS for setting icon responsive\n  const useStyles = makeStyles((theme) => ({\n    sectionDesktop: {\n      display: \"none\",\n      [theme.breakpoints.up(\"md\")]: {\n        display: \"flex\",\n      },\n    },\n    sectionMobile: {\n      display: \"flex\",\n      [theme.breakpoints.up(\"md\")]: {\n        display: \"none\",\n      },\n    },\n  }));\n  const classes = useStyles();\n\n  return (\n    <>\n      <Button\n        className={classes.sectionDesktop}\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleClickOpen}\n        aria-label=\"api settings desktop\"\n      >\n        Set API Key\n      </Button>\n\n      <IconButton\n        className={classes.sectionMobile}\n        onClick={handleClickOpen}\n        color=\"primary\"\n        aria-label=\"api settings mobile\"\n      >\n        <SettingsIcon />\n      </IconButton>\n      <ApiSettingsModal\n        isOpen={showApiSetting}\n        onClose={() => {\n          setShowApiSetting(false);\n        }}\n        value={apikey}\n        onApiChange={onApiChange}\n      />\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemSecondaryAction,\n  ListItemText,\n} from \"@material-ui/core\";\nimport MovieIcon from \"@material-ui/icons/Movie\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { IconButton, Avatar } from \"@material-ui/core\";\n\nexport function NominationsList({ nominations, removeNomination }) {\n  if (Object.keys(nominations).length === 0) {\n    return (\n      <div>\n        <p>\n          Add something to the nomination list... <br />\n        </p>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <List dense={true}>\n          {Object.values(nominations).map((movie) => (\n            <ListItem key={movie.imdbID}>\n              <ListItemAvatar>\n                <Avatar>\n                  {movie.Poster === \"N/A\" ? (\n                    <MovieIcon />\n                  ) : (\n                    <img src={movie.Poster} alt=\"movie poster\" width=\"100%\" />\n                  )}\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary={movie.Title} secondary={movie.Year} />\n              <ListItemSecondaryAction>\n                <IconButton\n                  edge=\"end\"\n                  aria-label=\"remove\"\n                  onClick={() => removeNomination(movie.imdbID)}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { IconButton, Box, Avatar } from \"@material-ui/core\";\nimport {\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemSecondaryAction,\n  ListItemText,\n} from \"@material-ui/core\";\nimport MovieIcon from \"@material-ui/icons/Movie\";\nimport StarIcon from \"@material-ui/icons/Star\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Pagination from \"@material-ui/lab/Pagination\";\n\nconst useStyles = makeStyles((theme) => ({\n  pagination: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n}));\n\nexport function SearchResults({\n  searchKey,\n  isError,\n  error,\n  numResult,\n  addNomination,\n  movieData,\n  nominations,\n  page,\n  handlePageChange,\n  isFiveNominations,\n}) {\n  const classes = useStyles();\n  // display instruction that the search key needs to be longer than 2 characters\n  if (searchKey.length < 3) {\n    return (\n      <div>\n        <h3>\n          <span role=\"img\" aria-label=\"find\">\n            🔍\n          </span>{\" \"}\n          Find a movie in the search bar!\n        </h3>\n        <p>The keyword needs to be longer than 2 characters</p>\n      </div>\n    );\n    // display search error\n  } else if (isError === true) {\n    return (\n      <Box>\n        <h3>\n          <span role=\"img\" aria-label=\"film\">\n            🎞️\n          </span>{\" \"}\n          Results for \"{searchKey}\" ({0})\n        </h3>\n        <p>\n          <span role=\"img\" aria-label=\"confused\">\n            😵\n          </span>{\" \"}\n          Uh no... {error}\n        </p>\n      </Box>\n    );\n    // display search results - button disabled if movie is nominated or have reached 5 nominations. pagination included\n  } else {\n    return (\n      <div>\n        <h3>\n          <span role=\"img\" aria-label=\"film\">\n            🎞️\n          </span>{\" \"}\n          Results for \"{searchKey}\" ({numResult})\n        </h3>\n        <div>\n          <List dense={true}>\n            {Object.values(movieData).map((movie) => {\n              const isNominated = nominations[movie.imdbID] !== undefined;\n              return (\n                <ListItem key={movie.imdbID}>\n                  <ListItemAvatar>\n                    <Avatar>\n                      {movie.Poster === \"N/A\" ? (\n                        <MovieIcon />\n                      ) : (\n                        <img\n                          src={movie.Poster}\n                          alt=\"movie poster\"\n                          width=\"100%\"\n                        />\n                      )}\n                    </Avatar>\n                  </ListItemAvatar>\n                  <ListItemText primary={movie.Title} secondary={movie.Year} />\n                  <ListItemSecondaryAction>\n                    <IconButton\n                      edge=\"end\"\n                      aria-label=\"add\"\n                      onClick={() => addNomination(movie.imdbID)}\n                      disabled={isNominated || isFiveNominations}\n                      color=\"primary\"\n                    >\n                      <StarIcon />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              );\n            })}\n          </List>\n        </div>\n        <Pagination\n          page={page}\n          onChange={handlePageChange}\n          count={Math.ceil(numResult / 10)}\n          className={classes.pagination}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { useEffect } from \"react\";\nimport Slide from \"@material-ui/core/Slide\";\n\nexport function PositionedSnackbar({ isFiveNominations }) {\n  const [open, setOpen] = React.useState(false);\n\n  function SlideTransition(props) {\n    return <Slide {...props} direction=\"down\" />;\n  }\n\n  useEffect(() => {\n    if (isFiveNominations) {\n      setOpen(true);\n    } else {\n      setOpen(false);\n    }\n  }, [isFiveNominations]);\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Snackbar\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        TransitionComponent={SlideTransition}\n      >\n        <Alert onClose={handleClose} severity=\"success\" variant=\"filled\">\n          You have nominated 5 movies!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\nimport { SearchBar } from \"./components/SearchBar\";\nimport { ApiSettingsButton } from \"./components/ApiSettingsButton\";\nimport { NominationsList } from \"./components/NominationList\";\nimport { SearchResults } from \"./components/SearchResults\";\nimport { PositionedSnackbar } from \"./components/Snackbar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Box, Button } from \"@material-ui/core\";\nimport _ from \"lodash\";\n\nfunction App() {\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [movieData, setMovieData] = useState([]);\n  const [numResult, setNumResults] = useState(0);\n  const [page, setPage] = useState(1);\n  const [isError, setIsError] = useState(true);\n  const [error, setError] = useState(null);\n  const [nominations, setNominations] = useState(\n    JSON.parse(localStorage.getItem(\"nominations\") || \"{}\")\n  );\n  const [isFiveNominations, setIsFiveNominations] = useState(false);\n  // API Key is currently hard coded in\n  const [apikey, setApiKey] = useState(\n    localStorage.getItem(\"apikey\") || \"cbf06e88\"\n  );\n\n  // set api key and update in local storage\n  const onApiChange = (apikey) => {\n    setApiKey(apikey);\n    localStorage.setItem(\"apikey\", apikey);\n  };\n\n  // set nominations to local storage\n  const onSetNomination = (nominations) => {\n    setNominations(nominations);\n    localStorage.setItem(\"nominations\", JSON.stringify(nominations));\n  };\n\n  // Add movie from nominmation list\n  const addNomination = (imdbID) => {\n    if (Object.keys(nominations).length < 5) {\n      const newNomination = movieData[imdbID];\n      onSetNomination({ ...nominations, [imdbID]: newNomination });\n    }\n  };\n\n  // Remove movie from nominmation list\n  const removeNomination = (imdbID) => {\n    const newNomination = { ...nominations };\n    delete newNomination[imdbID];\n    onSetNomination(newNomination);\n  };\n\n  // when page number changes\n  const handlePageChange = (event, value) => {\n    setPage(value);\n    sendQuery(searchKey, value);\n  };\n\n  // handle reset nomatinations - clear all nomaintions\n  const handleResetNominations = () => {\n    onSetNomination({});\n  };\n\n  // debounce - delay query to 300m to not over load the fetch\n  const delayedQuery = useCallback(\n    _.debounce((searchKey) => sendQuery(searchKey), 300),\n    []\n  );\n  const onSearchChange = (e) => {\n    setSearchKey(e.target.value);\n    delayedQuery(e.target.value);\n  };\n\n  // send query to fetch movie list if keyword search is longer than 2 characters\n  const sendQuery = (searchKey, page) => {\n    const url =\n      \"https://www.omdbapi.com/?apikey=\" +\n      apikey +\n      \"&s=\" +\n      searchKey +\n      \"&page=\" +\n      page +\n      \"&type=movie\";\n    if (searchKey.length > 2) {\n      fetch(url, {\n        method: \"GET\",\n      })\n        .then((response) => response.json())\n        .then(\n          (result) => {\n            if (result.Response === \"True\") {\n              setNumResults(result.totalResults);\n              const data = {};\n              result.Search.forEach((item) => {\n                data[item.imdbID] = item;\n              });\n              setMovieData(data);\n              setIsError(false);\n            } else {\n              setError(result.Error);\n              setIsError(true);\n            }\n          },\n          (error) => {\n            setIsError(true);\n            setError(error);\n          }\n        );\n    }\n  };\n\n  // when api key changes - run query again\n  useEffect(() => {\n    sendQuery(searchKey, page);\n  }, [apikey]);\n\n  // update if nominations num changes. if hits 5 show alert\n  useEffect(() => {\n    if (Object.keys(nominations).length === 5) {\n      setIsFiveNominations(true);\n    } else {\n      setIsFiveNominations(false);\n    }\n  }, [nominations]);\n\n  return (\n    <Box\n      className=\"App\"\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"flex-start\"\n      p={3}\n    >\n      <Box p={2} className=\"Header\">\n        <img src=\"shoppies_logo.png\" alt=\"shoppies logo\" width=\"70%\" />\n      </Box>\n      <Box\n        m={2}\n        className=\"API-settings\"\n        position=\"absolute\"\n        top={18}\n        right={18}\n      >\n        <ApiSettingsButton apikey={apikey} onApiChange={onApiChange} />\n      </Box>\n      <Box p={1}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Paper>\n              <SearchBar onChange={onSearchChange} value={searchKey} />\n            </Paper>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Paper>\n              <Box p={1}>\n                <SearchResults\n                  searchKey={searchKey}\n                  isError={isError}\n                  error={error}\n                  numResult={numResult}\n                  addNomination={addNomination}\n                  movieData={movieData}\n                  nominations={nominations}\n                  page={page}\n                  handlePageChange={handlePageChange}\n                  isFiveNominations={isFiveNominations}\n                />\n              </Box>\n            </Paper>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Paper>\n              <Box p={1}>\n                <h3>\n                  <span role=\"img\" aria-label=\"throphy\">\n                    🏆\n                  </span>{\" \"}\n                  Nominations List ({5 - Object.keys(nominations).length}{\" \"}\n                  Remaining)\n                </h3>\n                <NominationsList\n                  nominations={nominations}\n                  removeNomination={removeNomination}\n                />\n                {isFiveNominations && (\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleResetNominations}\n                    aria-label=\"reset nominations\"\n                  >\n                    Reset\n                  </Button>\n                )}\n              </Box>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Box>\n      <PositionedSnackbar isFiveNominations={isFiveNominations} />\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}